<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\MauSac;
use Illuminate\Http\Request;

class MauSacController extends Controller
{
    public function index()
    {
        $mausacs = MauSac::all();
        return view('admins.mausacs.index', compact('mausacs'));
    }
    public function create()
    {
        return view('admins.mausacs.create');
    }
    public function store(Request $request)
    {
        $request->validate([
            'ten_mau_sac' => 'required|string|max:255|unique:mau_sacs,ten_mau_sac',
            'ma_mau' => 'required|string|max:7|unique:mau_sacs,ma_mau'
        ], [
            'ten_mau_sac.required' => 'T√™n m√†u s·∫Øc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!',
            'ten_mau_sac.string' => 'T√™n m√†u s·∫Øc ph·∫£i l√† m·ªôt chu·ªói!',
            'ten_mau_sac.unique' => 'T√™n m√†u s·∫Øc ƒë√£ t·ªìn t·∫°i!',
            'ma_mau.required' => 'M√£ m√†u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!',
            'ma_mau.string' => 'M√£ m√†u ph·∫£i l√† m·ªôt chu·ªói k√Ω t·ª±!',
        ]);
        $params = $request->except('_token');
        MauSac::create($params);
        return redirect()->route('admin.mausacs.index')->with('success', 'Th√™m m√†u m·ªõi th√†nh c√¥ng(-_-)');
    }
    public function edit(string $id)
    {
        $mausac = MauSac::findOrFail($id);
        return view('admins.mausacs.update', compact('mausac'));
    }
    public function update(Request $request, string $id)
    {
        $request->validate([
            'ten_mau_sac' => 'required|string|max:255|unique:mau_sacs,ten_mau_sac,' . $id,
            'ma_mau' => 'required|string|max:7|unique:mau_sacs,ma_mau,' . $id
        ], [
            'ten_mau_sac.required' => 'T√™n m√†u s·∫Øc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!',
            'ten_mau_sac.string' => 'T√™n m√†u s·∫Øc ph·∫£i l√† m·ªôt chu·ªói!',
            'ten_mau_sac.unique' => 'T√™n m√†u s·∫Øc ƒë√£ t·ªìn t·∫°i!',
            'ma_mau.required' => 'M√£ m√†u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!',
            'ma_mau.string' => 'M√£ m√†u ph·∫£i l√† m·ªôt chu·ªói k√Ω t·ª±!',
            'ma_mau.unique' => 'M√£ m√†u ƒë√£ t·ªìn t·∫°i!',
        ]);

        $params = $request->except('_token');
        $mausac = MauSac::findOrFail($id);
        $mausac->update($params);

        return redirect()->route('admin.mausacs.index')->with('success', 'C·∫≠p nh·∫≠t m√†u th√†nh c√¥ng (-_-)');
    }


    public function onOffMauSac($id)
    {
        $mausac = MauSac::find($id);
        if (!$mausac) {
            return redirect()->route('admin.mausacs.index')->with('error', 'M√†u s·∫Øc kh√¥ng t·ªìn t·∫°i üò¢');
        }
        $mausac->trang_thai = !$mausac->trang_thai;
        $mausac->save();
        $message = $mausac->trang_thai ? 'Ho·∫°t ƒë·ªông m√†u s·∫Øc' : 'Ng·ª´ng ho·∫°t ƒë·ªông m√†u s·∫Øc';
        return redirect()->back()->with('success', $message);
    }
    public function destroy(string $id)
    {
        // T√¨m m√†u s·∫Øc theo ID
        $mausac = MauSac::findOrFail($id);
        // Ki·ªÉm tra xem c√≥ bi·∫øn th·ªÉ s·∫£n ph·∫©m n√†o li√™n quan c√≤n s·ªë l∆∞·ª£ng kh√¥ng

        if (!$mausac) {
            return redirect()->back()->with('error', 'Kh√¥ng t√¨m th·∫•y m√†u s·∫Øc!');
        }
        $counmausac = $mausac->bienTheSanPhams()->withTrashed()->get();
        if (count($counmausac) > 0) {
            return redirect()->back()->with('error', 'M√†u s·∫Øc ƒë√£ c√≥ s·∫£n ph·∫©m, kh√¥ng th·ªÉ x√≥a!');
        }

        // N·∫øu kh√¥ng c√≥ bi·∫øn th·ªÉ n√†o c√≤n s·ªë l∆∞·ª£ng, th·ª±c hi·ªán x√≥a m·ªÅm
        $mausac->delete();

        return redirect()->route('admin.mausacs.index')->with('success', 'X√≥a m√†u th√†nh c√¥ng!');
    }

    public function trash() {
        $mausacs = MauSac::onlyTrashed()->get();
        return view('admins.mausacs.trash', compact('mausacs'));
    }
    public function restore($id) {
        $mausac = MauSac::onlyTrashed()->findOrFail($id);
        $mausac->restore();
        return redirect()->route('admin.mausacs.trash')->with('success', 'Kh√¥i ph·ª•c th√†nh c√¥ng');
    }
}
